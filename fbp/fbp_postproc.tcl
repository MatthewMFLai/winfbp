# Copyright (C) 2016 by Matthew Lai, email : mmlai@sympatico.ca
#
# The author  hereby grants permission to use,  copy, modify, distribute,
# and  license this  software  and its  documentation  for any  purpose,
# provided that  existing copyright notices  are retained in  all copies
# and that  this notice  is included verbatim  in any  distributions. No
# written agreement, license, or royalty  fee is required for any of the
# authorized uses.  Modifications to this software may be copyrighted by
# their authors and need not  follow the licensing terms described here,
# provided that the new terms are clearly indicated on the first page of
# each file where they apply.
#
# IN NO  EVENT SHALL THE AUTHOR  OR DISTRIBUTORS BE LIABLE  TO ANY PARTY
# FOR  DIRECT, INDIRECT, SPECIAL,  INCIDENTAL, OR  CONSEQUENTIAL DAMAGES
# ARISING OUT  OF THE  USE OF THIS  SOFTWARE, ITS DOCUMENTATION,  OR ANY
# DERIVATIVES  THEREOF, EVEN  IF THE  AUTHOR  HAVE BEEN  ADVISED OF  THE
# POSSIBILITY OF SUCH DAMAGE.
#
# THE  AUTHOR  AND DISTRIBUTORS  SPECIFICALLY  DISCLAIM ANY  WARRANTIES,
# INCLUDING,   BUT   NOT  LIMITED   TO,   THE   IMPLIED  WARRANTIES   OF
# MERCHANTABILITY,  FITNESS   FOR  A  PARTICULAR   PURPOSE,  AND
# NON-INFRINGEMENT.  THIS  SOFTWARE IS PROVIDED  ON AN "AS  IS" BASIS,
# AND  THE  AUTHOR  AND  DISTRIBUTORS  HAVE  NO  OBLIGATION  TO  PROVIDE
# MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
#!/bin/sh
# \
exec tclsh $0 $@

# This program alters the file generated by fbp_test.tcl from the 
# following original format
#INIT 8008 IN-1 8007 IN-2 8006 OUT-1 8000 OUT-2 8001 PROGRAM /disk2/component/basic/forward2/forward2.tcl TESTDATA red-ball
#
# to the following split transmit/receive format
#
#INIT 8016 IN-1-8008 8017 IN-2-8018 8006 OUT-1-8008 8007 OUT-2-8008 8006 TYPE RX
#INIT 8008 IN-1 8007 IN-2 8006 OUT-1 8000 OUT-2 8001 PROGRAM /disk2/component/basic/forward2/forward2.tcl TESTDATA red-ball TYPE TX
#
# The newly generated file has the suffix ".split" rather than the
# ".out".

# For the new group port feature, we are given the port group data like
#"IN-1 localhost:9000 IN-2 localhost:9001 IN-3 localhost:9002 INIT localhost:9003 PORTSET-1 {IN-1 PORTGRP-1 ON} PORTSET-2 {IN-2 PORTGRP-1 OFF} PORTSET-3 {IN-3 PORTGRP-1 OFF} PROGRAM sequencer_comp.tcl BLOCK t1"
# and we need to generate the port group lines in the connector like:
#  "INIT localhost:8000 IN-1-9000 8001 QUEUE-1-9000 100 OUT-1-9000 9000 IN-2-9001 8002 QUEUE-2-9001 100 OUT-2-9001 9001 IN-3-9002 8003  QUEUE-3-9002 100 OUT-3-9002 9002 PORTGRP-1 {IN-1-9000 PORT_ACTIVE IN-2-9001 PORT_ACTIVE IN-3-9002 PORT_ACTIVE} BLOCK CONNECT TYPE RX"

proc get_port {token} {
    return [lindex [split $token ":"] 1]
}

proc get_ipaddr {token} {
    return [lindex [split $token ":"] 0]
}

proc set_endpt {ipaddr portnum} {
    return "$ipaddr:$portnum"
}

proc strip_ipaddr {token} {
    set idx [string first "," $token]
    if {$idx > -1} {
	incr idx
	set token [string range $token $idx end]
    }
    return $token
}

set infile [lindex $argv 0]
set outfile [lindex $argv 1]
if {$outfile == ""} {
    set filename [lindex [split $infile "."] 0]
    set outfile $filename\.split
}

# Scan for maximum port number used in the original file.
set maxportnum 0
set fd [open $infile r]
while {[gets $fd line] > -1} {
    array set tmpdata $line
    # Port number includes ipaddr, looks like 
    # <IP>:<port number>
    set portnum [get_port $tmpdata(INIT)]
    if {$portnum > $maxportnum} {
	set maxportnum $portnum
    }
    unset tmpdata
}
close $fd

incr maxportnum

array set connector {}
array set portgroupdata {}
set connector(INIT) $maxportnum
incr maxportnum

set ipaddrlist ""

set fd [open $infile r]
set fd2 [open $outfile w]
while {[gets $fd line] > -1} {
    array set tmpdata $line
    set in_idx [string first "IN-" $line]
    set out_idx [string first "OUT-" $line]
    set prog_idx [string first "PROGRAM" $line]
    set group_idx [string first "PORTSET-" $line]

    # Special processing for loadmgr.
    set loadmgr_idx [string first "loadmgr" $line]
    if {$loadmgr_idx != -1} {
	incr prog_idx -1
	set ld_line [string range $line 0 $prog_idx]
	append ld_line "TYPE LDMGR"
	puts $fd2 $ld_line
	unset tmpdata
	continue
    }
    # End special processing for loadmgr.

    if {$prog_idx == -1} {
	puts "No PROGRAM found in $line"
	close $fd
	close $fd2
	exit -1
    }

    if {$group_idx != -1} {
	set ipaddr [get_ipaddr $tmpdata(INIT)]
	set initport [get_port $tmpdata(INIT)]
	foreach portset [array names tmpdata "PORTSET-*"] {
	    set tokens $tmpdata($portset)
	    set port [lindex $tokens 0]-$initport
	    set groupname PORTGRP-[lindex $tokens 1]-$initport
	    if {[lindex $tokens 2] == "ON"} {
		set status "PORT_ACTIVE"
	    } else {
		set status "PORT_QUIET"
	    }
	    if {[info exists portgroupdata($ipaddr,$groupname)] == 0} {
	    	set portgroupdata($ipaddr,$groupname) ""
	    }
	    lappend portgroupdata($ipaddr,$groupname) $port 
	    lappend portgroupdata($ipaddr,$groupname) $status
	}
    }

    if {$in_idx != -1 && $out_idx != -1} {
	# Both inport and outport present, split line into 2 lines
	# using the first "OUT" as the split point.
	set rx_line ""
	set tx_line ""
	set rx_line2 ""
	set ipaddr [get_ipaddr $tmpdata(INIT)]
	set initport [get_port $tmpdata(INIT)]
	lappend ipaddrlist $ipaddr
	foreach inport [array names tmpdata IN-*] {
	    set connector($ipaddr,$inport\-$initport) [get_port $tmpdata($inport)]
	    regsub "IN-" $inport "QUEUE-" portqueue
	    if {[info exists tmpdata($portqueue)]} {
		set connector($ipaddr,$portqueue\-$initport) $tmpdata($portqueue)
	    }
	    regsub "IN-" $inport "OUT-" outport
	    set connector($ipaddr,$outport\-$initport) $maxportnum
	    append rx_line2 "$inport [set_endpt $ipaddr $maxportnum] "
	    incr maxportnum
	}

	set tx_line [string range $line $out_idx end]
	set tx_line "BLOCK $tmpdata(BLOCK) INIT [set_endpt $ipaddr $initport]\
            $rx_line2 $tx_line"
	if {[string first "PORTSET-" $tx_line] == -1 &&
	    [array names tmpdata "PORTSET-*"] != ""} {
	    foreach portset [array names tmpdata "PORTSET-*"] {
	        append tx_line " $portset \{ $tmpdata($portset) \}"
	    }		    
 	}
	append tx_line " TYPE TX"
	puts $fd2 $tx_line

    } elseif {$in_idx != -1 && $out_idx == -1} {
	# inport present and outport absent, split line into 2 lines
	# using the first "PROGRAM" as the split point.
	set rx_line ""
	set tx_line ""
	set rx_line2 ""
	set ipaddr [get_ipaddr $tmpdata(INIT)]
	set initport [get_port $tmpdata(INIT)]
	lappend ipaddrlist $ipaddr
	foreach inport [array names tmpdata IN-*] {
	    set connector($ipaddr,$inport\-$initport) [get_port $tmpdata($inport)]
	    regsub "IN-" $inport "QUEUE-" portqueue
	    if {[info exists tmpdata($portqueue)]} {
		set connector($ipaddr,$portqueue\-$initport) $tmpdata($portqueue)
	    }
	    regsub "IN-" $inport "OUT-" outport
	    set connector($ipaddr,$outport\-$initport) $maxportnum
	    append rx_line2 "$inport [set_endpt $ipaddr $maxportnum] "
	    incr maxportnum
	}

	set tx_line "BLOCK $tmpdata(BLOCK) INIT [set_endpt $ipaddr $initport]\
            $rx_line2 "
	append tx_line [string range $line $prog_idx end]
	if {[string first "PORTSET-" $tx_line] == -1 &&
	    [array names tmpdata "PORTSET-*"] != ""} {
	    foreach portset [array names tmpdata "PORTSET-*"] {
	        append tx_line " $portset \{ $tmpdata($portset) \}"
	    }		    
 	} 
	append tx_line " TYPE TX"
	puts $fd2 $tx_line

 
    } elseif {$in_idx == -1 && $out_idx != -1} {
	# inport absent and outport present, split line into 2 lines
	# using the first "OUT-" as the split point.
	# No need to generate rx line; just generate tx line.
	append line " TYPE TX_OUTONLY"
	puts $fd2 $line 

    } else {
	# Line has no inport and outport. Exit with failure.
	puts "No inport nor outport in $line"
	exit -1
    }
    unset tmpdata
}

# Now output the connector data.
foreach ipaddr [lsort -unique $ipaddrlist] {
    set rx_line ""
    append rx_line "BLOCK CONNECT "
    append rx_line "INIT [set_endpt $ipaddr $connector(INIT)] "
    foreach idx [lsort [array names connector "$ipaddr,IN-*"]] {
    	append rx_line "[strip_ipaddr $idx] $connector($idx) "
    }
    foreach idx [lsort [array names connector "$ipaddr,QUEUE-*"]] {
    	append rx_line "[strip_ipaddr $idx] $connector($idx) "
    }
    foreach idx [lsort [array names connector "$ipaddr,OUT-*"]] {
    	append rx_line "[strip_ipaddr $idx] $connector($idx) "
    }
    foreach idx [lsort [array names portgroupdata "$ipaddr,*"]] {
    	append rx_line "[strip_ipaddr $idx] \{ $portgroupdata($idx) \} "
    }
    append rx_line "TYPE RX"
    puts $fd2 $rx_line
}

close $fd
close $fd2

exit 0

